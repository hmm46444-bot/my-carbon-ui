/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { sortStates } from './sortStates.js';
import { sortRows } from '../tools/sorting.js';

// eslint-disable-next-line @typescript-eslint/no-explicit-any -- https://github.com/carbon-design-system/carbon/issues/20071

const initialSortState = sortStates.NONE;

/**
 * Gets the next sort direction for a header.
 *
 * @param prevHeader - Key of the previously sorted header.
 * @param currentHeader - Key of the currently selected header.
 * @param prevState - Previous sort direction.
 */
const getNextSortDirection = (prevHeader, currentHeader, prevState) => {
  // Cycle for sorting the same header: NONE -> ASC -> DESC -> NONE.
  if (prevHeader === currentHeader) {
    switch (prevState) {
      case sortStates.NONE:
        return sortStates.ASC;
      case sortStates.ASC:
        return sortStates.DESC;
      case sortStates.DESC:
        return sortStates.NONE;
    }
  }

  // Sorting a new header starts at ascending order.
  return sortStates.ASC;
};

/**
 * Gets the next sort state.
 *
 * @param props - Component props.
 * @param state - Current table state.
 * @param key - Header key to sort by.
 */
const getNextSortState = (props, state, {
  key
}) => {
  const {
    sortDirection,
    sortHeaderKey
  } = state;
  const nextSortDirection = getNextSortDirection(key, sortHeaderKey ?? '', sortDirection);
  return getSortedState(props, state, key, nextSortDirection);
};

/**
 * Gets a sort state update.
 *
 * @param props - Component props.
 * @param state - Current state of the table.
 * @param key - Header key to sort by.
 * @param sortDirection - Sort direction to apply.
 */
const getSortedState = ({
  locale,
  sortRow
}, {
  rowIds,
  cellsById,
  initialRowOrder
}, key, sortDirection) => {
  const nextRowIds = sortDirection !== sortStates.NONE ? sortRows({
    rowIds,
    cellsById,
    sortDirection,
    key,
    locale,
    sortRow
  }) : initialRowOrder;
  return {
    sortHeaderKey: key,
    sortDirection,
    rowIds: nextRowIds
  };
};

export { getNextSortDirection, getNextSortState, getSortedState, initialSortState };
